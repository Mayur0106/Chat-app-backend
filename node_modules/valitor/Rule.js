/**
 * @file Rule规则校验器集合
 *
 * @author  Liandong Liu (liu@liandong.org)
 *
 * #通用校验规则应该在这里设置
 */

var pattern = require('./pattern');
var url = require('./url');

/**
 * 渲染，支持简单地变量替换
 */
function render(tpl, data) {
    return tpl.replace(/\{\{([^\}]+)\}\}/g,
        function (str, key) {
            return data.hasOwnProperty(key) ? data[key] : str;
        }
    )
}


function Rule(conf) {
    this.conf = conf;
}

function byteLength(value) {
    return value.replace(/[^\x00-\xff]/g, 'xx').length;
}

Rule.prototype.number = function (value, expect) {
    return pattern.isNumber(value) ? true : expect.message;
};

/**
 * 基础的字符合法性校验
 */
Rule.prototype.text = function (value, expect) {
    return pattern.isNormalText(value) ? true : expect.message;
};

Rule.prototype.descCnNameText = function (value, expect) {
    return pattern.isNormalText(value.replace(/\n/g, '')) ? true : expect.message;
};

Rule.prototype.phone = function (value, expect) {
    return pattern.isPhone(value) ? true : expect.message;
};

Rule.prototype.mobile = function (value, expect) {
    return pattern.regs.mobile.test(value) ? true : expect.message;
};

Rule.prototype.email = function (value, expect) {
    return pattern.regs.email.test(value) ? true : expect.message;
};

Rule.prototype.date = function (value, expect) {
    return pattern.regs.date.test(value) ? true : expect.message;
};

Rule.prototype.qq = function (value, expect) {
    return pattern.regs.qq.test(value) ? true : expect.message;
};

Rule.prototype.zipcode = function (value, expect) {
    return pattern.regs.zipcode.test(value) ? true : expect.message;
};

Rule.prototype.idcard = function (value, expect) {
    return pattern.regs.idcard.test(value) ? true : expect.message;
};

Rule.prototype.url = function (value, expect) {
    return url.isUrl(value) ? true : expect.message;
};

// 域名合法性检查
Rule.prototype.domain = function (value, expect) {
    return url.isSameDomain(value) ? true : expect.message;
};

Rule.prototype.max = function (value, expect) {
    return value <= expect.value ? true : expect.message;
};

Rule.prototype.minPrice = function (value, expect) {
    expect.value = this._minPrice || expect.value;
    return value >= expect.value ? true : expect.message;
};

Rule.prototype.min = function (value, expect) {
    return value >= expect.value ? true : expect.message;
};

Rule.prototype.maxByteLength = function (value, expect) {
    if (expect.wildcard) {
        value = value.replace(/{|}/g, '');
    }
    return byteLength(value) <= expect.value ? true : expect.message;
};

Rule.prototype.minByteLength = function (value, expect) {
    if (expect.wildcard) {
        value = value.replace(/{|}/g, '');
    }
    return byteLength(value) >= expect.value ? true : expect.message;
};

Rule.prototype.minDate = function (value, expect) {
    return new Date(value) >= new Date(expect.value) ? true : expect.message;
};

Rule.prototype.maxDate = function (value, expect) {
    return new Date(value) <= new Date(expect.value) ? true : expect.message;
};

Rule.prototype.patterns = function (value, expect) {
    var patterns = [].concat(expect);
    var result = patterns.filter(function (pattern) {
        if (pattern.match && !pattern.match.test(value)) {
            return true;
        }
        if (pattern.exclude && pattern.exclude.test(value)) {
            return true;
        }
    });
    return result.length === 0 ? true : result[0].message;
};

// 通免规则，解决特殊取值
Rule.prototype.pass = function (value, expect) {
    if (expect.value instanceof Array) {
        return expect.value.indexOf(value) > -1;
    }
    if (expect.value instanceof RegExp) {
        return expect.value.test(value);
    }
    return expect.value === value;
};

Rule.prototype.required = function (value, expect) {
    return !expect.value ||(value != undefined && value != '') ? true : expect.message;
}


Rule.prototype.check = function (value, name) {
    var conf = this.conf;
    var result = {};
    var flag = false;
    name = name || conf.name;
    // 判断是否可以通免
    if (conf.pass && this.pass(value, conf.pass)) {
        return true;
    }
    if(conf['required']){
        var key = 'required';
        if(!conf[key].value && (value==''||value == undefined)){
            return  true;
        }
    }
    for (var key in conf) {
        if (Rule.prototype.hasOwnProperty(key) && key !== 'name' && key !== 'pass') {
            var info = this[key](value, conf[key]);
            if (info !== true) {
                // 如果有指定特殊字段名称，则采用字段名替换
                // result[key] = name ? info.replace('{name}', name) : info;
                result[key] = render(info, {
                    name: name || key,
                    key: key,
                    value: conf[key].value
                });
                flag = true;
            }
        }
    }
    return flag ? result : true;
};

module.exports = Rule;